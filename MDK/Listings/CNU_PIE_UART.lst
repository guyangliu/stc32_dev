C251 COMPILER V5.60.0,  CNU_PIE_UART                                                       06/10/23  11:25:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CNU_PIE_UART
OBJECT MODULE PLACED IN .\Objects\CNU_PIE_UART.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\..\Libraries\deivers\src\CNU_PIE_UART.c XSMALL BROWSE INCDIR(..\
                    -..\..\Libraries\boards\inc;..\..\..\Libraries\startup\inc;..\USER\inc;..\..\..\Libraries\deivers\inc) DEBUG PRINT(.\List
                    -ings\CNU_PIE_UART.lst) TABS(2) OBJECT(.\Objects\CNU_PIE_UART.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           *     COPYRIGHT NOTICE
    3           *     Copyright (c) 2023,CNU_W.PIE
    4           *     All rights reserved.
    5           *
    6           *     ³ý×¢Ã÷³ö´¦Íâ£¬ÒÔÏÂËùÓÐÄÚÈÝ°æÈ¨¾ùÊôÅÖÅÖ¸öÈËËùÓÐ£¬Î´¾­ÔÊÐí£¬²»µÃÓÃÓÚÉÌÒµÓÃÍ¾£¬
    7           *     ÐÞ¸ÄÄÚÈÝÊ±±ØÐë±£ÁôPPµÄ°æÈ¨ÉùÃ÷¡£
    8           *     Except where indicated, the copyright of all the contents below is owned by PP 
    9           *     and can not be used for commercial purposes without permission. 
   10           *     The copyright notice of PP must be preserved when modifying the content.
   11           *
   12           * @file       CNU_PIE_UART.c
   13           * @brief      UART
   14           * @author     ÅÖÅÖ
   15           * @version    v1.0
   16           * @note       NULL
   17           * @date       2023-07-26
   18           ********************************************************************************************************
             -************/
   19          #include "CNU_PIE_UART.h"
   20          
   21          uint8_t UART_BUSY[5];                         //´®¿Ú½ÓÊÕÃ¦±êÖ¾Î»
   22          uint8_t uart1_tx_buff[UART1_TX_BUFFER_SIZE];  //·¢ËÍ»º³å
   23          uint8_t uart1_rx_buff[UART1_RX_BUFFER_SIZE];  //½ÓÊÕ»º³å
   24          
   25           /*******************************************************************************************************
             -*******************
   26           * @brief  UARTÒý½Å³õÊ¼»¯
   27           * @exampleCode
   28           *       UART_Init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM1);        //³õÊ¼»¯´®¿Ú1 ²¨ÌØÂÊ115200 ·
             -¢ËÍÒý½ÅÊ¹ÓÃP31 ½ÓÊÕÒý½ÅÊ¹ÓÃP30 ,Ê¹ÓÃ¶¨Ê±Æ÷1×÷Îª²¨ÌØÂÊ·¢ÉúÆ÷
   29           * @endcode
   30           * @param[in]  UART_N        UART´®¿ÚºÅ
   31           * @param[in]  UART_Rx_Pin   RXÒý½Å              
   32           * @param[in]  UART_Tx_Pin   TXÒý½Å
   33           * @param[in]  BaudRate      ²¨ÌØÂÊ
   34           * @param[in]  Timer_CHN     ²¨ÌØÂÊ·¢ÉúÆ÷-¶¨Ê±Æ÷
   35          *********************************************************************************************************
             -******************/
   36          
   37          void UART_Init(UARTN_Enum UART_N, UART_PIN_Enum UART_Rx_Pin, UART_PIN_Enum UART_Tx_Pin, uint32_t BaudRate
             - , TIMER_CHN_Enum Timer_CHN)
   38          {
   39   1        uint16_t brt;
   40   1        brt = (uint16_t)(65536 - (FOSC/BaudRate/4));
   41   1        switch(UART_N)
   42   1        {
   43   2          case UART_1:
   44   2          {
   45   3            if     (TIM1 == Timer_CHN){SCON |= 0x50; TMOD |= 0x00; TL1 = brt; TH1 = brt >> 8; AUXR |= 0x40; TR1 = 
             -1; UART_BUSY[1] = 0;}
   46   3            else if(TIM2 == Timer_CHN){SCON |= 0x50; T2L = brt; T2H = brt >> 8; AUXR |= 0x15;} P_SW1 &= ~(0x03<<6)
             -;
   47   3            if     ((UART1_RX_P30 == UART_Rx_Pin) && (UART1_TX_P31 == UART_Tx_Pin)) P_SW1 |= 0x00;
   48   3            else if((UART1_RX_P36 == UART_Rx_Pin) && (UART1_TX_P37 == UART_Tx_Pin)) P_SW1 |= 0x40;
   49   3            else if((UART1_RX_P16 == UART_Rx_Pin) && (UART1_TX_P17 == UART_Tx_Pin)) P_SW1 |= 0x80;
C251 COMPILER V5.60.0,  CNU_PIE_UART                                                       06/10/23  11:25:02  PAGE 2   

   50   3            else if((UART1_RX_P43 == UART_Rx_Pin) && (UART1_TX_P44 == UART_Tx_Pin)) P_SW1 |= 0xc0;
   51   3            UART_BUSY[1] = 0; ES = 1; break;
   52   3          }
   53   2          case UART_2:
   54   2          {
   55   3            if(TIM2 == Timer_CHN){S2CON |= 0x10; T2L = brt; T2H = brt >> 8; AUXR |= 0x14;} P_SW2 &= ~(0x01<<0);
   56   3            if     ((UART2_RX_P10 == UART_Rx_Pin) && (UART2_TX_P11 == UART_Tx_Pin)) P_SW2 |= 0x00;
   57   3            else if((UART2_RX_P46 == UART_Rx_Pin) && (UART2_TX_P47 == UART_Tx_Pin)) P_SW2 |= 0x01;
   58   3            UART_BUSY[2] = 0; ES2 = 1; break;
   59   3            break;
   60   3          }
   61   2          case UART_3:
   62   2          {
   63   3            if(TIM2 == Timer_CHN)     {S3CON |= 0x10; T2L = brt; T2H = brt >> 8; AUXR |= 0x14;}
   64   3            else if(TIM3 == Timer_CHN){S3CON |= 0x50; T3L = brt; T3H = brt >> 8; T4T3M |= 0x0a;P_SW2 &= ~(0x01<<1)
             -;}
   65   3            if     ((UART3_RX_P00 == UART_Rx_Pin) && (UART3_TX_P01 == UART_Tx_Pin)) P_SW2 |= 0x00;
   66   3            else if((UART3_RX_P50 == UART_Rx_Pin) && (UART3_TX_P51 == UART_Tx_Pin)) P_SW2 |= 0x02;
   67   3            UART_BUSY[3] = 0; ES3 = 1;
   68   3            break;
   69   3          }
   70   2          case UART_4:
   71   2          {
   72   3            if(TIM2 == Timer_CHN)      {S4CON |= 0x10; T2L = brt; T2H = brt >> 8; AUXR |= 0x14;}
   73   3            else if(TIM4 == Timer_CHN) {S4CON |= 0x50; T4L = brt; T4H = brt >> 8; T4T3M |= 0xa0;} P_SW2 &= ~(0x01<
             -<2);
   74   3            if     ((UART4_RX_P02 == UART_Rx_Pin) && (UART4_TX_P03 == UART_Tx_Pin))                              P
             -_SW2 |= 0x00;
   75   3            else if((UART4_RX_P52 == UART_Rx_Pin) && (UART4_TX_P53 == UART_Tx_Pin)){P5M0 = 0x00; P5M1 = 0x01<<2; P
             -_SW2 |= 0x04;}
   76   3            UART_BUSY[4] = 0; ES4 = 1;
   77   3            break;
   78   3          }
   79   2        }
   80   1      }
   81           /*******************************************************************************************************
             -*******************
   82           * @brief  UART·¢ËÍÒ»¸ö×Ö½Ú
   83           * @exampleCode
   84           *       UART_PutChar(UART_1, 0xff);        //´®¿Ú1·¢ËÍ0xff
   85           * @endcode
   86           * @param[in]  UART_N        UART´®¿ÚºÅ
   87           * @param[in]  data_t        ·¢ËÍµÄÊý¾Ý              
   88          *********************************************************************************************************
             -******************/
   89          void UART_PutChar(UARTN_Enum UART_N,uint8_t data_t)
   90          {
   91   1        switch(UART_N)
   92   1        {
   93   2          case UART_1:
   94   2            while (UART_BUSY[1]);
   95   2            UART_BUSY[1] = 1;  SBUF = data_t;break;
   96   2          case UART_2:
   97   2            while (UART_BUSY[2]);
   98   2            UART_BUSY[2] = 1; S2BUF = data_t;break;
   99   2          case UART_3:
  100   2            while (UART_BUSY[3]);
  101   2            UART_BUSY[3] = 1; S3BUF = data_t;break;
  102   2          case UART_4:
  103   2            while (UART_BUSY[4]);
  104   2            UART_BUSY[4] = 1; S4BUF = data_t;break;
  105   2        }
  106   1      }
  107           /*******************************************************************************************************
             -*******************
  108           * @brief  UART·¢ËÍÊý×é
C251 COMPILER V5.60.0,  CNU_PIE_UART                                                       06/10/23  11:25:02  PAGE 3   

  109           * @exampleCode
  110           *       UART_PutBuff(UART_1, &data[0] ,5);        //´®¿Ú1·¢ËÍdataÊý×é ·¢ËÍÎå¸ö×Ö½Ú
  111           * @endcode
  112           * @param[in]  UART_N        UART´®¿ÚºÅ 
  113           * @param[in]  *p            µØÖ·            
  114           * @param[in]  lenth         Êý¾Ý³¤¶È  
  115          *********************************************************************************************************
             -******************/
  116          void UART_PutBuff(UARTN_Enum UART_N , uint8_t *p , uint16_t lenth)
  117          {
  118   1          while(lenth--)UART_PutChar(UART_N,*p++);
  119   1      }
  120           /*******************************************************************************************************
             -*******************
  121           * @brief  UART·¢ËÍ×Ö·û´®
  122           * @exampleCode
  123          *       UART_PutBuff(UART_1,¡°w.pie¡±);        //´®¿Ú1·¢ËÍ×Ö·û´®
  124           * @endcode
  125           * @param[in]  UART_N        UART´®¿ÚºÅ
  126           * @param[in]  *str          ×Ö·û´®/×Ö·û´®Ê×µØÖ·              
  127          *********************************************************************************************************
             -******************/
  128          void UART_PutStr(UARTN_Enum UART_N , uint8_t *str)
  129          {
  130   1          while(*str)
  131   1          {
  132   2            UART_PutChar(UART_N, *str++);
  133   2          }
  134   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       610     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       205         12
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
