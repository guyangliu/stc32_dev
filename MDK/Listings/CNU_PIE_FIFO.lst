C251 COMPILER V5.60.0,  CNU_PIE_FIFO                                                       06/10/23  21:56:27  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CNU_PIE_FIFO
OBJECT MODULE PLACED IN .\Objects\CNU_PIE_FIFO.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\..\Libraries\deivers\src\CNU_PIE_FIFO.c XSMALL BROWSE INCDIR(..\
                    -..\..\Libraries\boards\inc;..\..\..\Libraries\startup\inc;..\USER\inc;..\..\..\Libraries\deivers\inc) DEBUG PRINT(.\List
                    -ings\CNU_PIE_FIFO.lst) TABS(2) OBJECT(.\Objects\CNU_PIE_FIFO.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           *     COPYRIGHT NOTICE
    3           *     Copyright (c) 2023,CNU_W.PIE
    4           *     All rights reserved.
    5           *     本库函数参考逐飞科技开源的STC函数库
    6           *     除注明出处外，以下所有内容版权均属胖胖个人所有，未经允许，不得用于商业用途，
    7           *     修改内容时必须保留PP的版权声明。
    8           *     Except where indicated, the copyright of all the contents below is owned by PP 
    9           *     and can not be used for commercial purposes without permission. 
   10           *     The copyright notice of PP must be preserved when modifying the content.
   11           *
   12           * @file       CNU_PIE_FIFO.c
   13           * @brief      FIFO
   14           * @author     胖胖
   15           * @version    v1.0
   16           * @note       NULL
   17           * @date       2023-07-26
   18           ********************************************************************************************************
             -************/
   19           #include "CNU_PIE_FIFO.h"
   20           
   21          
   22          //-------------------------------------------------------------------------------------------------------
             -------------
   23          // @brief       FIFO 初始化 挂载对应缓冲区
   24          // @param       *fifo           FIFO 对象指针
   25          // @param       *buffer_addr    要挂载的缓冲区
   26          // @param       size            缓冲区大小
   27          // @return      fifo_state_enum 操作状态
   28          // Sample usage:
   29          //-------------------------------------------------------------------------------------------------------
             -------------
   30          fifo_state_enum fifo_init (fifo_struct *fifo, uint8_t *buffer_addr, uint32_t size)
   31          {
   32   1          if(buffer_addr == NULL)
   33   1              return FIFO_BUFFER_NULL;
   34   1          fifo->buffer    = buffer_addr;
   35   1          fifo->head      = 0;
   36   1          fifo->end       = 0;
   37   1          fifo->size      = size;
   38   1          fifo->max       = size;
   39   1          return FIFO_SUCCESS;
   40   1      }
   41          
   42          //-------------------------------------------------------------------------------------------------------
             -------------
   43          // @brief       FIFO 头指针位移
   44          // @param       *fifo           FIFO 对象指针
   45          // @param       offset          偏移量
   46          // @return      void
   47          // Sample usage:
   48          //-------------------------------------------------------------------------------------------------------
             -------------
   49          void fifo_head_offset (fifo_struct *fifo, uint32_t offset)
   50          {
   51   1          fifo->head += offset;
C251 COMPILER V5.60.0,  CNU_PIE_FIFO                                                       06/10/23  21:56:27  PAGE 2   

   52   1      
   53   1          while(fifo->max <= fifo->head)                                              // 如果范围超过则减缓冲区
             -大小 直到小于最大缓冲区大小
   54   1          {
   55   2              fifo->head -= fifo->max;
   56   2          }
   57   1      }
   58          
   59          //-------------------------------------------------------------------------------------------------------
             -------------
   60          // @brief       FIFO 尾指针位移
   61          // @param       *fifo           FIFO 对象指针
   62          // @param       offset          偏移量
   63          // @return      void
   64          // Sample usage:
   65          //-------------------------------------------------------------------------------------------------------
             -------------
   66          void fifo_end_offset (fifo_struct *fifo, uint32_t offset)
   67          {
   68   1          fifo->end += offset;
   69   1      
   70   1          while(fifo->max <= fifo->end)                                               // 如果范围超过则减缓冲区
             -大小 直到小于最大缓冲区大小
   71   1          {
   72   2              fifo->end -= fifo->max;
   73   2          }
   74   1      }
   75          
   76          //-------------------------------------------------------------------------------------------------------
             -------------
   77          // @brief       FIFO 重置缓冲器
   78          // @param       *fifo           FIFO 对象指针
   79          // @return      void
   80          // Sample usage:
   81          //-------------------------------------------------------------------------------------------------------
             -------------
   82          void fifo_clear (fifo_struct *fifo)
   83          {
   84   1          fifo->head      = 0;
   85   1          fifo->end       = 0;
   86   1          fifo->size      = fifo->max;
   87   1      }
   88          
   89          //-------------------------------------------------------------------------------------------------------
             -------------
   90          // @brief       FIFO 查询当前数据个数
   91          // @param       *fifo           FIFO 对象指针
   92          // @return      void
   93          // Sample usage:
   94          //-------------------------------------------------------------------------------------------------------
             -------------
   95          uint32_t fifo_used (fifo_struct *fifo)
   96          {
   97   1          return (fifo->max - fifo->size);
   98   1      }
   99          
  100          //-------------------------------------------------------------------------------------------------------
             -------------
  101          // @brief       向 FIFO 中写入数据
  102          // @param       *fifo           FIFO 对象指针
  103          // @param       *dat            数据来源缓冲区指针
  104          // @param       length          需要写入的数据长度
  105          // @return      fifo_state_enum 操作状态
  106          // Sample usage:                if(fifo_write_buffer(&fifo,data,32)!=FIFO_SUCCESS) while(1);
  107          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  CNU_PIE_FIFO                                                       06/10/23  21:56:27  PAGE 3   

  108          fifo_state_enum fifo_write_buffer (fifo_struct *fifo, uint8_t *dat, uint32_t length)
  109          {
  110   1          uint32_t temp_length;
  111   1      
  112   1          if(length < fifo->size)                                                     // 剩余空间足够装下本次数
             -据
  113   1          {
  114   2              temp_length = fifo->max - fifo->head;                                   // 计算头指针距离缓冲区尾
             -还有多少空间
  115   2      
  116   2              if(length > temp_length)                                                // 距离缓冲区尾长度不足写
             -入数据 环形缓冲区分段操作
  117   2              {
  118   3                  memcpy(&fifo->buffer[fifo->head], dat, (uint16_t)temp_length);                // 拷贝第一段数
             -据
  119   3                  fifo_head_offset(fifo, temp_length);                                // 头指针偏移
  120   3                  dat += temp_length;                                                 // 读取缓冲偏移
  121   3                  memcpy(&fifo->buffer[fifo->head], dat, length - temp_length);       // 拷贝第一段数据
  122   3                  fifo_head_offset(fifo, length - temp_length);                       // 头指针偏移
  123   3              }
  124   2              else
  125   2              {
  126   3                  memcpy(&fifo->buffer[fifo->head], dat, (uint16_t)length);                     // 一次完整写入
  127   3                  fifo_head_offset(fifo, length);                                     // 头指针偏移
  128   3              }
  129   2      
  130   2              fifo->size -= length;                                                   // 缓冲区剩余长度减小
  131   2          }
  132   1          else
  133   1          {
  134   2              return FIFO_SPACE_NO_ENOUGH;
  135   2          }
  136   1      
  137   1          return FIFO_SUCCESS;
  138   1      }
  139          
  140          //-------------------------------------------------------------------------------------------------------
             -------------
  141          // @brief       从 FIFO 读取数据
  142          // @param       *fifo           FIFO 对象指针
  143          // @param       *dat            目标缓冲区指针
  144          // @param       *length         读取的数据长度 如果没有这么多数据这里会被修改
  145          // @param       flag            是否变更 FIFO 状态 可选择是否清空读取的数据
  146          // @return      fifo_state_enum 操作状态
  147          // Sample usage:                if(fifo_read_buffer(&fifo,data,32,FIFO_READ_ONLY)!=FIFO_SUCCESS) while(1)
             -;
  148          //-------------------------------------------------------------------------------------------------------
             -------------
  149          fifo_state_enum fifo_read_buffer (fifo_struct *fifo, uint8_t *dat, uint32_t *length, fifo_operation_enum 
             -flag)
  150          {
  151   1          uint8_t data_check = 0;
  152   1          uint32_t temp_length;
  153   1      
  154   1          if(*length > fifo_used(fifo))
  155   1          {
  156   2              *length = (fifo->max - fifo->size);                                     // 纠正读取的长度
  157   2              data_check = 1;                                                         // 标志数据不够
  158   2          }
  159   1      
  160   1          temp_length = fifo->max - fifo->end;                                        // 计算尾指针距离缓冲区尾
             -还有多少空间
  161   1          if(*length <= temp_length)                                                  // 足够一次性读取完毕
  162   1          {
  163   2              if(NULL != dat)    memcpy(dat, &fifo->buffer[fifo->end], (uint16_t)*length);      // 一次性读取完
             -毕
C251 COMPILER V5.60.0,  CNU_PIE_FIFO                                                       06/10/23  21:56:27  PAGE 4   

  164   2          }
  165   1          else
  166   1          {
  167   2              if(NULL != dat)
  168   2              {
  169   3                  memcpy(dat, &fifo->buffer[fifo->end], (uint16_t)temp_length);                 // 拷贝第一段数
             -据
  170   3                  memcpy(&dat[temp_length], &fifo->buffer[0], *length - temp_length); // 拷贝第二段数据
  171   3              }
  172   2          }
  173   1      
  174   1          if(flag == FIFO_READ_AND_CLEAN)                                             // 如果选择读取并更改 FIF
             -O 状态
  175   1          {
  176   2              fifo_end_offset(fifo, *length);                                         // 移动 FIFO 头指针
  177   2              fifo->size += *length;
  178   2          }
  179   1      
  180   1          return (data_check?FIFO_DATA_NO_ENOUGH:FIFO_SUCCESS);
  181   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       760     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         31
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
