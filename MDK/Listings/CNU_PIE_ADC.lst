C251 COMPILER V5.60.0,  CNU_PIE_ADC                                                        06/10/23  21:56:27  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CNU_PIE_ADC
OBJECT MODULE PLACED IN .\Objects\CNU_PIE_ADC.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\..\Libraries\deivers\src\CNU_PIE_ADC.c XSMALL BROWSE INCDIR(..\.
                    -.\..\Libraries\boards\inc;..\..\..\Libraries\startup\inc;..\USER\inc;..\..\..\Libraries\deivers\inc) DEBUG PRINT(.\Listi
                    -ngs\CNU_PIE_ADC.lst) TABS(2) OBJECT(.\Objects\CNU_PIE_ADC.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           *     COPYRIGHT NOTICE
    3           *     Copyright (c) 2023,CNU_W.PIE
    4           *     All rights reserved.
    5           *
    6           *     除注明出处外，以下所有内容版权均属胖胖个人所有，未经允许，不得用于商业用途，
    7           *     修改内容时必须保留PP的版权声明。
    8           *     Except where indicated, the copyright of all the contents below is owned by PP 
    9           *     and can not be used for commercial purposes without permission. 
   10           *     The copyright notice of PP must be preserved when modifying the content.
   11           *
   12           * @file       CNU_PIE_ADC.c
   13           * @brief      ADC
   14           * @author     胖胖
   15           * @version    v1.0
   16           * @note       NULL
   17           * @date       2023-07-26
   18           ********************************************************************************************************
             -************/
   19          #include "CNU_PIE_ADC.h"
   20           /*******************************************************************************************************
             -*******************
   21           * @brief  ADC初始化函数
   22           * @exampleCode
   23           *      ADC_Init(ADC_P10 , ADC_SPEED_2X16T); //ADC P10引脚初始化为ADC ，时钟分频ADC_SPEED_2X16T
   24           * @endcode
   25           * @param[in]  ADC_PIN   ADC引脚
   26           * @param[in]  ADC_SPEED ADC时钟分频系输
   27          *********************************************************************************************************
             -******************/
   28          void ADC_Init(ADC_PIN_ENUM ADC_PIN , ADC_SPEED_ENUM ADC_SPEED)
   29          {
   30   1        ADC_CONTR |= 1<<7;        
   31   1        ADC_CONTR &= (0xF0);    
   32   1        ADC_CONTR |= ADC_PIN;
   33   1        
   34   1        if((ADC_PIN >> 3) == 1) //P0端口
   35   1        {
   36   2          //IO口需要设置为高阻输入
   37   2          P0M0 &= ~(1 << (ADC_PIN & 0x07));
   38   2          P0M1 |= (1 << (ADC_PIN & 0x07));
   39   2        }
   40   1        else if((ADC_PIN >> 3) == 0) //P1端口 
   41   1        {
   42   2          //IO口需要设置为高阻输入
   43   2          P1M0 &= ~(1 << (ADC_PIN & 0x07));
   44   2          P1M1 |= (1 << (ADC_PIN & 0x07));
   45   2        }
   46   1      
   47   1        ADCCFG |= ADC_SPEED&0x0F;     //Fosc_ADC = SYSCLK/2(SPEED+1)
   48   1        
   49   1        ADCCFG |= 1<<5;         //转换结果右对齐。 ADC_RES 保存结果的高 2 位， ADC_RESL 保存结果的低 8 位。
   50   1      }
   51           /*******************************************************************************************************
             -*******************
   52           * @brief  ADC初始化函数
C251 COMPILER V5.60.0,  CNU_PIE_ADC                                                        06/10/23  21:56:27  PAGE 2   

   53           * @exampleCode
   54           *      uint16_t data;
   55           *      data = ADC_Init(ADC_P10 , ADC_12BIT); //ADC P10读取一次数据 12位精度
   56           * @endcode
   57           * @retval ADC_Value   ADC读取一次的数据
   58          *********************************************************************************************************
             -******************/
   59          uint16_t ADC_Read_Once(ADC_PIN_ENUM ADC_PIN , uint8_t Precision)
   60          {
   61   1        uint16_t ADC_Value;
   62   1        
   63   1        ADC_CONTR &= (0xF0);      //清除ADC_CHS[3:0] ： ADC 模拟通道选择位
   64   1        ADC_CONTR |= ADC_PIN;
   65   1        
   66   1        ADC_CONTR |= 0x40;        // 启动 AD 转换
   67   1        while (!(ADC_CONTR & 0x20));    // 查询 ADC 完成标志
   68   1        ADC_CONTR &= ~0x20;       // 清完成标志
   69   1        
   70   1        ADC_Value = ADC_RES;        //存储 ADC 的 12 位结果的高 4 位
   71   1        ADC_Value <<= 8;
   72   1        ADC_Value |= ADC_RESL;      //存储 ADC 的 12 位结果的低 8 位
   73   1        
   74   1        ADC_RES = 0;
   75   1        ADC_RESL = 0;
   76   1        
   77   1        ADC_Value >>= Precision;    //取多少位
   78   1        
   79   1        return ADC_Value;
   80   1      }
   81           /*******************************************************************************************************
             -*******************
   82           * @brief  ADC传输取数+滤波（均值冒泡）函数
   83           * @exampleCode
   84           *      uint16_t data;
   85           *      data = ADC_Average(ADC_P10 , ADC_12BIT , 10); //ADC P10读取十次数据 12位精度 返回一个数据
   86           * @endcode
   87           * @retval ADC_Value   ADC读取一次的数据
   88          *********************************************************************************************************
             -******************/
   89          uint16_t ADC_Average(ADC_PIN_ENUM ADC_PIN , uint8_t Precision , uint8_t N) 
   90          {
   91   1        uint32_t sum=0;
   92   1        uint8_t M=N;
   93   1        int i=0;
   94   1        int j=0;
   95   1        int str[20]={0};
   96   1        for(i=0;i<N;i++)str[i]=ADC_Read_Once(ADC_PIN,Precision);
   97   1        for(i=1;i<N;i++)
   98   1          for(j=0;j<N-i;j++)
   99   1          {
  100   2            if(str[j]>str[j+1])
  101   2            {
  102   3              int t=str[j+1];
  103   3              str[j+1]=str[j];
  104   3              str[j]=t;
  105   3            }
  106   2          }
  107   1        for(i=1;i<N-1;i++)sum+=str[i];
  108   1        return ((uint16_t)(sum/M));
  109   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       366     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
C251 COMPILER V5.60.0,  CNU_PIE_ADC                                                        06/10/23  21:56:27  PAGE 3   

  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         49
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        40     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
