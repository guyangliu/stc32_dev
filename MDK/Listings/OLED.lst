C251 COMPILER V5.60.0,  OLED                                                               06/10/23  11:25:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\OLED.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\..\Libraries\boards\src\OLED.c XSMALL BROWSE INCDIR(..\..\..\Lib
                    -raries\boards\inc;..\..\..\Libraries\startup\inc;..\USER\inc;..\..\..\Libraries\deivers\inc) DEBUG PRINT(.\Listings\OLED
                    -.lst) TABS(2) OBJECT(.\Objects\OLED.obj) 

stmt  level    source

    1          #include <math.h>
    2          #include <stdio.h>
    3          #include <stdarg.h>
    4          
    5          #include "Font.h" 
    6          #include "OLED.h" 
    7          #include "string.h"
    8          #include "CNU_PIE_I2C.h"
    9          
   10          void oled_init(void)
   11          {
   12   1        oled_wrcmd(0xae);
   13   1        oled_wrcmd(0x00);
   14   1        oled_wrcmd(0x10);
   15   1        oled_wrcmd(0x40);
   16   1        oled_wrcmd(0x81);
   17   1        oled_wrcmd(0xcf);
   18   1        oled_wrcmd(0xa0);
   19   1        oled_wrcmd(0xc0);
   20   1        oled_wrcmd(0xa6);
   21   1        oled_wrcmd(0xa8);
   22   1        oled_wrcmd(0x3f);
   23   1        oled_wrcmd(0xd3);
   24   1        oled_wrcmd(0x00);
   25   1        oled_wrcmd(0xd5);
   26   1        oled_wrcmd(0x80);
   27   1        oled_wrcmd(0xd9);
   28   1        oled_wrcmd(0xf1);
   29   1        oled_wrcmd(0xda);
   30   1        oled_wrcmd(0x12);
   31   1        oled_wrcmd(0xdb);
   32   1        oled_wrcmd(0x40);
   33   1        oled_wrcmd(0x20);
   34   1        oled_wrcmd(0x02);
   35   1        oled_wrcmd(0x8d);
   36   1        oled_wrcmd(0x14);
   37   1        oled_wrcmd(0xa4);
   38   1        oled_wrcmd(0xa6);
   39   1        oled_wrcmd(0xaf);
   40   1        oled_cls();
   41   1        oled_setpos(0,0);
   42   1      }
   43          
   44          void oled_wrcmd(unsigned char WrCmd) 
   45          {
   46   1        uint8_t cmd[2];
   47   1        cmd[0]=0x00;
   48   1        cmd[1]=WrCmd;
   49   1        I2C_WriteNbyte(OLED_ID,cmd[0],&cmd[1],1);
   50   1      }
   51          void oled_wrdata(unsigned char WrData) 
   52          {
   53   1        uint8_t dat[2];
   54   1        dat[0]=0x40;
   55   1        dat[1]=WrData;
   56   1        I2C_WriteNbyte(OLED_ID,dat[0],&dat[1],1);
   57   1      }
C251 COMPILER V5.60.0,  OLED                                                               06/10/23  11:25:02  PAGE 2   

   58          void oled_cls(void)
   59          {
   60   1        unsigned char i,n;
   61   1        for(i=0;i<8;i++)
   62   1        {
   63   2          oled_wrcmd((uint8_t)(0xb0+i));
   64   2          oled_wrcmd(0x00);
   65   2          oled_wrcmd(0x10);
   66   2          for(n=0;n<128;n++)
   67   2            oled_wrdata(0x00);
   68   2        }
   69   1      }
   70          void oled_cls_line(unsigned char i)
   71          {
   72   1        int n = 0;
   73   1          oled_wrcmd((uint8_t)(0xb0+i));
   74   1          oled_wrcmd(0x01);
   75   1          oled_wrcmd(0x10);
   76   1          for(n=0;n<128;n++)
   77   1           oled_wrdata(0x00);
   78   1      }
   79          
   80          void oled_setpos(unsigned char x,unsigned char y)
   81          {
   82   1          oled_wrcmd((uint8_t)(0xb0+y));
   83   1          oled_wrcmd(((x&0xf0)>>4)|0x10);
   84   1          oled_wrcmd((x&0x0f));
   85   1      }
   86          void oled_on(void)
   87          {
   88   1          oled_wrcmd(0x8d);
   89   1          oled_wrcmd(0x14);
   90   1          oled_wrcmd(0xaf);
   91   1      }
   92          void oled_off(void)
   93          {
   94   1          oled_wrcmd(0x8d);
   95   1          oled_wrcmd(0x10);
   96   1          oled_wrcmd(0xae);
   97   1      }
   98          void oled_p8x16_str(unsigned char x,unsigned char y,char ch[]) 
   99          {
  100   1        unsigned char c=0,i=0,j=0;
  101   1      
  102   1        while (ch[j]!='\0')
  103   1        {
  104   2          c =ch[j]-32;
  105   2          if(x>120){x=0;y++;}
  106   2          oled_setpos(x,y);
  107   2          for(i=0;i<8;i++)
  108   2            oled_wrdata(F8X16[c*16+i]);
  109   2          oled_setpos(x,(uint8_t)(y+1));
  110   2          for(i=0;i<8;i++)
  111   2            oled_wrdata(F8X16[c*16+i+8]);
  112   2          x+=8;
  113   2          j++;
  114   2        }
  115   1      }
  116          void oled_p6x8_str(unsigned char x,unsigned char y,char ch[]) 
  117          {
  118   1        unsigned char c=0,i=0,j=0;
  119   1        while (ch[j]!='\0')
  120   1        {
  121   2          c =ch[j]-32;
  122   2          if(x>120){x=0;y++;}
  123   2          oled_setpos(x,y);
C251 COMPILER V5.60.0,  OLED                                                               06/10/23  11:25:02  PAGE 3   

  124   2          for(i=0;i<6;i++)
  125   2          oled_wrdata(F6x8[c][i]);
  126   2          x+=6;
  127   2          j++;
  128   2        }
  129   1      }
  130          void oled_show_float(unsigned char x,unsigned char y,float num,unsigned int N) 
  131          {
  132   1       #define MAX_STR 12 
  133   1        char tmp[MAX_STR]={0};int n=3;
  134   1        float NUM=num;
  135   1        float _num=fabs(NUM);
  136   1        int i;
  137   1        uint32_t num0;
  138   1       if(NUM<0)
  139   1       {
  140   2         NUM=_num;
  141   2         tmp[0]='-';
  142   2       }
  143   1       else tmp[0]='+';
  144   1       for(i=0;i<MAX_STR+1;i++)
  145   1       {
  146   2         _num/=10;
  147   2         if(_num<1)break;
  148   2         else  n++;
  149   2       }
  150   1       if(N>7)N=7;
  151   1       if(((int)(N)+2-n)>0)for(i=0;i<(N+2-n);i++)NUM*=10;
  152   1       num0=(uint32_t)NUM;
  153   1       for(i=N>=n?(N+2-1):n-1;i>0;i--)
  154   1        {
  155   2          if(i!=n-1)
  156   2          {
  157   3            tmp[i]=(char)(num0%10+0x30);
  158   3            num0/=10;
  159   3          }
  160   2          else
  161   2            tmp[i]='.';
  162   2        }
  163   1        tmp[N+2]=0;
  164   1        oled_p6x8_str(x,y,tmp);
  165   1      }
  166          
  167          //////////////////////////////////////////////////////////////
  168          
  169          ///////////////////////////////////////////////////////////////
  170          
  171          #define MCP_IODIR   0x00 
  172          #define MCP_IPOL    0x02 
  173          #define MCP_GPINTEN 0x04 
  174          #define MCP_DEFVAL  0x06 
  175                                   
  176                                   
  177          #define MCP_INTCON  0x08 
  178          #define MCP_GPPU    0x0c 
  179          #define MCP_INTF    0x0e 
  180          #define MCP_INTCAP  0x10 
  181          #define MCP_GPIO    0x12 
  182          #define MCP_OLAT    0x14 
  183          
  184          #define MCP_IOCON   0X0a 
  185          
  186          
  187          #define CON_BANK    0       
  188          #define CON_MIRROR  0       
  189          #define CON_SEQOP   1       
C251 COMPILER V5.60.0,  OLED                                                               06/10/23  11:25:02  PAGE 4   

  190          #define CON_DISSLW  0       
  191          #define CON_HAEN    1       
  192          #define CON_ODR     0       
  193          #define CON_INTPOL  0       
  194          
  195          
  196          void writ_mcp_iic(unsigned char reg,unsigned char pbuf)
  197          {
  198   1        uint8_t cmd[2];
  199   1        cmd[0]=reg;
  200   1        cmd[1]=pbuf;
  201   1        I2C_WriteNbyte(MCP_ID,cmd[0],&cmd[1],1);
  202   1      }
  203          int read_mcp_iic(uint8_t reg,uint8_t *pbuf)
  204          {
  205   1        I2C_ReadNbyte(MCP_ID,reg,pbuf,1);
  206   1        return *pbuf;
  207   1      }
  208          
  209          void init_mcp23017(void)
  210          {
  211   1              writ_mcp_iic(MCP_IOCON,(CON_BANK  <<7)|       
  212   1                                     (CON_MIRROR<<6)|       
  213   1                                     (CON_SEQOP <<5)|       
  214   1                                     (CON_DISSLW<<4)|       
  215   1                                     (CON_HAEN  <<3)|       
  216   1                                     (CON_ODR   <<2)|       
  217   1                                     (CON_INTPOL<<1) );     
  218   1      }
  219          
  220          //0 out,1 in
  221          void gpio_iic_init(PORTn_23n17 port,unsigned char set)
  222          {
  223   1        if(port==portA)
  224   1        {
  225   2          writ_mcp_iic(MCP_IODIR,set); 
  226   2          writ_mcp_iic(MCP_GPIO,set^0xff);
  227   2        }
  228   1        else if(port==portB)
  229   1        {
  230   2          writ_mcp_iic(MCP_IODIR+0x01,set); 
  231   2          writ_mcp_iic(MCP_GPIO+0x01,set^0xff);
  232   2        }
  233   1      }
  234          
  235          int gpio_iic_set(PORTn_23n17 port,unsigned char set)
  236          {
  237   1        unsigned char pbuf;
  238   1        if(port==portA)
  239   1        {
  240   2          read_mcp_iic(MCP_IODIR,&pbuf);
  241   2          writ_mcp_iic(MCP_OLAT,(pbuf^0xff)&set);
  242   2          read_mcp_iic(MCP_OLAT,&pbuf);
  243   2        }
  244   1        else
  245   1        {
  246   2          read_mcp_iic(MCP_IODIR+0x01,&pbuf);
  247   2          writ_mcp_iic(MCP_OLAT+0x01,(pbuf^0xff)&set);
  248   2          read_mcp_iic(MCP_OLAT+0x01,&pbuf);
  249   2        } 
  250   1        if(pbuf==set)return 1;
  251   1        else return 0;
  252   1      }
  253          
  254          
  255          unsigned char gpio_iic_read(PORTn_23n17 port)
C251 COMPILER V5.60.0,  OLED                                                               06/10/23  11:25:02  PAGE 5   

  256          {
  257   1        unsigned char pbuf;
  258   1        if(port==portA)
  259   1        read_mcp_iic(MCP_GPIO,&pbuf);
  260   1        else
  261   1         read_mcp_iic(MCP_GPIO+0x01,&pbuf);
  262   1        return pbuf;
  263   1      }
  264          int Scan_Keyboard(void)              
  265          {
  266   1          if(gpio_iic_read(portA)==239)     //key7 A4
  267   1              return 9;
  268   1          if(gpio_iic_read(portA)==223)     //key4 A5
  269   1              return 4;
  270   1          if(gpio_iic_read(portA)==191)     //key4 A6
  271   1              return 10;
  272   1          if(gpio_iic_read(portA)==127)     //key4 A6
  273   1              return 12;
  274   1          if(gpio_iic_read(portB)==251)     //key1 B2
  275   1              return 1;
  276   1          if(gpio_iic_read(portB)==223)     //key2 B5
  277   1              return 2;
  278   1          if(gpio_iic_read(portB)==254)     //key3 B0
  279   1              return 3;
  280   1          if(gpio_iic_read(portB)==253)     //key5 B1
  281   1              return 5;
  282   1          if(gpio_iic_read(portB)==127)     //key6 B7
  283   1              return 6;
  284   1          if(gpio_iic_read(portB)==247)     //key7 B3
  285   1              return 7;
  286   1          if(gpio_iic_read(portB)==239)     //key7 B4
  287   1              return 8;
  288   1          if(gpio_iic_read(portB)==191)     //key4 A6
  289   1              return 11;
  290   1      
  291   1          return 0;
  292   1      }
  293          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1465     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         38
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        12     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
